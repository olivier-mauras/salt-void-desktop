"set nocompatible              " be iMproved, required
"filetype off                  " required
"filetype plugin indent on     " required
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
"set rtp+=~/.vim/bundle/Vundle.vim
"call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
"Plugin 'VundleVim/Vundle.vim'
"Plugin 'mzlogin/vim-markdown-toc'
" All of your Plugins must be added before the following line
"call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
syntax on
" Automatically indent when adding a curly bracket, etc.
set smartindent
set shiftwidth=2
set tabstop=2
set expandtab

set encoding=utf-8

" Status line
set laststatus=2
set statusline=
set statusline+=%-3.3n\                      " buffer number
set statusline+=%f\                          " filename
set statusline+=%h%m%r%w                     " status flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}] " file type
set statusline+=%=                           " right align remainder
set statusline+=0x%-8B                       " character value
set statusline+=%-14(%l,%c%V%)               " line, character
set statusline+=%<%P                         " file position
" Show line number, cursor position.
set ruler
" Show cursor underline
set cursorline
" Display incomplete commands.
set showcmd
" To insert timestamp, press F3.
nmap <F3> a<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>
imap <F3> <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR>
" Make xon/xoff hit vim
silent !stty -ixon > /dev/null 2>/dev/null
silent !stty -ixoff > /dev/null 2>/dev/null
" Add Ctrl+S/Q to save and quit
nmap <c-s> :w<CR>
imap <c-s> <Esc>:w<CR>a
nmap <c-q> :q!<CR>
imap <c-q> <Esc>:q!<CR>
" Search as you type.
set incsearch
" Ignore case when searching.
set ignorecase
" Show autocomplete menus.
set wildmenu
" Show editing mode
set showmode
" Error bells are displayed visually.
set visualbell

" Mouse behavior
set mouse=
"set paste

" Fix Ctrl+w and backspace
set bs=2
set t_Sb=^[[4%dm
set t_Sf=^[[3%dm

" Handling 256 colors and load colorscheme accordingly
if $TERM =~ "-256color"
  set t_Co=256
  colorscheme BusyBee
else
  colorscheme desert
endif

" persistence {{{
" thanks to TWal https://github.com/TWal

if isdirectory($HOME . '/.vim/backup') == 0
    :silent !mkdir -p ~/.vim/backup >/dev/null 2>&1
endif
set backupdir-=.
set backupdir+=.
set backupdir-=~/
set backupdir^=~/.vim/backup/
set backup

" Save swp files to a less annoying place than the current directory.
if isdirectory($HOME . '/.vim/swap') == 0
    :silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=~/.vim/swap//
set directory+=.

" viminfo stores the the state of your previous editing session
set viminfo+=n~/.vim/viminfo

if exists("+undofile")
" undofile - This allows you to use undos after exiting and restarting
    if isdirectory($HOME . '/.vim/undo') == 0
        :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
    endif
    set undodir=~/.vim/undo//
    set undodir=~/.vim/undo//
    set undofile
endif

" Set filetypes per extention
au BufRead,BufNewFile *.sls setfiletype yaml

" Set only 2 spaces for tabs in yaml files
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2
